<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SudoEngine</name>
    </assembly>
    <members>
        <member name="M:SudoEngine.Core.GameObject.Delete">
            <summary>
            Supprime le GameObject ainsi que tous ces enfants
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SudoEngine.Core.GameObject.SetEnable(System.Boolean)" -->
        <member name="M:SudoEngine.Core.GameObject.SetParent(SudoEngine.Core.GameObject)">
            <summary>
            Permet d'assigner un objet en tant que parent de l'objet actuel
            </summary>
            <param name="parent">L'objet a mettre en parent</param>
        </member>
        <member name="M:SudoEngine.Core.GameObject.Hierarchy">
            <summary>
            Écrit dans la console la hiérarchie de l'objet actuel (remonte l'arbre des parents)
            </summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnCreation">
            <summary>Invoqué lors de l'appel du constructeur</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnStart">
            <summary>Invoqué lors de la première frame active</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnUpdate">
            <summary>Invoqué à chaque passage dans l'event OnUpdate de la fenêtre (La méthode statique <see cref="M:SudoEngine.Core.GameObject.Update"/> doit y être appelé)</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnRender">
            <summary>Invoqué à chaque passage dans l'event OnRender de la fenêtre (La méthode statique <see cref="M:SudoEngine.Core.GameObject.Render"/> doit y être appelé)</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnDelete">
            <summary>Invoqué lorsque la méthode <see cref="M:SudoEngine.Core.GameObject.Delete"/> est appelé</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnEnable">
            <summary>Invoqué lorsque l'objet est activé avec la méthode <see cref="M:SudoEngine.Core.GameObject.SetEnable(System.Boolean)"/></summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnDisable">
            <summary>Invoqué lorsque l'objet est déactivé avec la méthode <see cref="M:SudoEngine.Core.GameObject.SetEnable(System.Boolean)"/></summary>
        </member>
        <member name="M:SudoEngine.Core.Log.Info(System.Object)">
            <summary> <param>Écrit un message dans la console (police bleue)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.Warning(System.Object)">
            <summary> <param>Écrit un message dans la console (police jaune)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.Error(System.Object)">
            <summary> <param>Écrit un message dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.GLError">
            <summary> <param>Écrit l'erreur OpenGL la plus récente dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.ALError">
            <summary> <param>Écrit l'erreur OpenAL la plus récente dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.AlcError">
            <summary> <param>Écrit l'erreur OpenAL la plus récente dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.StartTimer">
            <summary> <param>Lance une StopWatch</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.StopTimer">
            <summary> <param>Stoppe la Stopwatch et écrit le temps écoulé avec un log info</param> </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.Identity">
            <summary>
            A no-rotation quaternion (0.0, 0.0, 0.0, 1.0)
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.Length">
            <summary>
            The length of that quaternion.
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.LengthSquared">
            <summary>
            The squared length of that quaternion. Faster than <see cref="P:SudoEngine.Maths.Quaternion.Length"/> but has to be squared rooted.
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.Euler">
            <summary>
            Get or set the euler rotation (degree) of this quaternion.
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Length">
            <summary> Taile du vecteur  </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.SquaredLength">
            <summary> Racine carré de la taile du vecteur </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.#ctor(System.Double)">
            <summary> Crée un Vecteur2D à partir d'un double </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.#ctor(System.Double,System.Double)">
            <summary> Crée un Vecteur2D à partir de deux double </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Normalize">
            <summary> Normalise le vecteur </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Distance(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule la distance entre 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.SquaredDistance(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule la distance au carré entre 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Dot(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Multiple 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Angle(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule l'angle entre 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.SignedAngle(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule l'angle signé entre 2 vecteurs </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Zero">
            <summary> Crée un vecteur 0 </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Up">
            <summary> Crée un vecteur qui pointe vers le haut </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Down">
            <summary> Crée un vecteur qui pointe vers le bas </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Right">
            <summary> Crée un vecteur qui pointe vers la gauche </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Left">
            <summary> Crée un vecteur qui pointe vers la droite </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Layer">
            <summary> Indique le layer sur lequel se trouve le BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.GFX">
            <summary> La texture attaché au BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Shader">
            <summary> Le shader attaché au BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Transparency">
            <summary> La transparence du BackGround, entre 0 (opaque) et 1 (complètement transparent) </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Visible">
            <summary> Indique si oui ou non le BackGround doit être render </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Size">
            <summary> La taille (en écrans) du BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Width">
            <summary> La largeur (en écrans) du background </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Height">
            <summary> La hauteur (en écrans) du BackGround </summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.BackGround"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (BackGround par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Bind">
            <summary>Bind les ressources du background</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Delete">
            <summary>Supprime le background</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Render">
            <summary>Render le background</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(SudoEngine.Render.Layer,SudoEngine.Render.Shader,SudoEngine.Render.Texture,SudoEngine.Maths.Vector2D)">
            <summary>
            Génère le background avec les paramètres donnés (<see cref="T:SudoEngine.Render.Layer"/>, <see cref="T:SudoEngine.Render.Shader"/>, <see cref="T:SudoEngine.Render.Texture"/> et <see cref="T:SudoEngine.Maths.Vector2D"/>)
            </summary>
            <param name="layer">Le <see cref="T:SudoEngine.Render.Layer"/> sur lequel se trouve le background</param>
            <param name="shader">Le <see cref="T:SudoEngine.Render.Shader"/> associé au background</param>
            <param name="gfx">La <see cref="T:SudoEngine.Render.Texture"/> du background, ces graphismes</param>
            <param name="size"><see cref="T:SudoEngine.Maths.Vector2D"/> représentant la taille du background en écrans</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(SudoEngine.Render.Layer,SudoEngine.Render.Shader,System.Int32[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Génère le background avec les paramètres données (<see cref="T:SudoEngine.Render.Layer"/>, <see cref="T:SudoEngine.Render.Shader"/>, <see cref="!:int[,]"/> et <see cref="T:System.Drawing.Bitmap"/>)
            </summary>
            <param name="layer">Le <see cref="T:SudoEngine.Render.Layer"/> sur lequel se trouve le background</param>
            <param name="shader">Le <see cref="T:SudoEngine.Render.Shader"/> associé au background</param>
            <param name="data">Array d'<see cref="!:int[,]"/> représentant les données des tiles</param>
            <param name="tileset"><see cref="T:System.Drawing.Bitmap"/> représentant le tileset</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(SudoEngine.Render.Texture,SudoEngine.Maths.Vector2D)">
            <summary>
            Génère le background avec les paramètres données (<see cref="T:SudoEngine.Render.Texture"/>, <see cref="T:SudoEngine.Maths.Vector2D"/>)
            </summary>
            <param name="gfx">La <see cref="T:SudoEngine.Render.Texture"/> du background, ces graphismes</param>
            <param name="size"><see cref="T:SudoEngine.Maths.Vector2D"/> représentant la taille du background en écrans</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(System.Int32[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Génère le background avec les paramètres données (<see cref="!:int[,]"/> et <see cref="T:System.Drawing.Bitmap"/>)
            </summary>
            <param name="data">Array d'<see cref="!:int[,]"/> représentant les données des tiles</param>
            <param name="tileset"><see cref="T:System.Drawing.Bitmap"/> représentant le tileset</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.RenderAll">
            <summary>Render tous les background non null/></summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.DeleteAll">
            <summary>Supprime tous les background/></summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.CreateList">
            <summary>Initialise la liste des backgrounds avec la valeur null</summary>
        </member>
        <member name="P:SudoEngine.Render.Shader.AllShaders">
            <summary>Liste de toutes les <see cref="T:SudoEngine.Render.Shader"/> actuellement chargé en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Render.Shader.Handle">
            <summary>Handle du shader (nécessaire au fonctionnement d'OpenGL)</summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.Shader"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Shader par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.Use">
            <summary>Bind le shader</summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.Delete">
            <summary>Supprime le shader </summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.DeleteAll">
            <summary>Supprime tous les shaders</summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Int32)">
            <summary>
            Permet de set un unifrom de type int dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Single)">
            <summary>
            Permet de set un unifrom de type float dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Double)">
            <summary>
            Permet de set un unifrom de type float dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector2*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector2"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector2)">
            <summary>
            Permet de set un unifrom de type <see cref="T:OpenTK.Vector2"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector2D*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:SudoEngine.Maths.Vector2D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector2D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Vector2D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector3*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector3"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector3)">
            <summary>
            Permet de set un unifrom de type <see cref="T:OpenTK.Vector3"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector3D*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:SudoEngine.Maths.Vector3D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector3D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Vector3D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector4*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector4)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector4D*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:SudoEngine.Maths.Vector4D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector4D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Vector4D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Matrix4*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Matrix4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Matrix4)">
            <summary>
            Permet de set un unifrom de type <see cref="T:OpenTK.Matrix4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Matrix4D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Matrix4D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Boolean)">
            <summary>
            Permet de set un unifrom de type bool dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.GetAttribLocation(System.String)">
            <summary>
            Récupère l'emplacement mémoire d'une variable uniform
            </summary>
            <param name="name">Le nom de la variable</param>
            <returns>L'empllacement de la variable</returns>
        </member>
        <member name="M:SudoEngine.Render.Shader.LoadFromFile(System.String,System.String,System.String)">
            <summary>
            Crée un shader a partir de fichiers (Shaders/ est automatiquement rajouté devant les chemins)
            </summary>
            <param name="Vpath">Chemin vers le Vertex Shader</param>
            <param name="Fpath">Cheminvers le Fragment Shader</param>
            <param name="Gpath">Chemin vers le Geometry Shader (null si non présent)</param>
        </member>
        <member name="P:SudoEngine.Render.Texture.AllTextures">
            <summary>Liste de toutes les <see cref="T:SudoEngine.Render.Texture"/> actuellement chargé en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Handle">
            <summary>Handle de la texture (nécessaire au fonctionnement d'OpenGL)</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Size">
            <summary>Taille de la texture, en pixels</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Width">
            <summary>Longueur de la texture en pixels</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Height">
            <summary>Hauteur de la texture en pixels</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Data">
            <summary>L/es données brutes des pixels de la texture</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.Texture"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Texture par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Texture.Delete">
            <summary>Supprime la texture</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.DeleteAll">
            <summary>Supprime l'intégralité des textures</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.Bind">
            <summary>Bind la texture</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.LoadFromFile(System.String)">
            <summary>
            Crée une texture à partir d'un fichier (préférablement un PNG)
            </summary>
            <param name="path">Le chemin vers le fichier de la texture (ajoute "Texture/" devant par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Texture.LoadFromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Crée une texture à partir d'un <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <param name="image">L'image à convertir en texture</param>
            <param name="reverse">Booléen indiquant si l'image doit être flip verticalement</param>
        </member>
        <member name="M:SudoEngine.Render.Texture.Generate(System.Byte[])">
            <summary>
            Génère une texture directement à partir de données brutes de pixels
            </summary>
            <param name="data">Array de <see cref="T:System.Byte"/> contenant les données RGBA de chaque pixel</param>
        </member>
    </members>
</doc>
