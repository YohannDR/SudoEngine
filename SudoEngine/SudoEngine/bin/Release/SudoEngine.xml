<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SudoEngine</name>
    </assembly>
    <members>
        <member name="T:SudoEngine.Core.Sound">
            <summary>
            Classe qui représente un son, fourni un ensemble de méthodes et de propriétés qui facilitent la création et la manipulation
            <para>Hérite de <see cref="T:SudoEngine.Core.BaseObject"/> et ne peut pas être hérité</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.AllSounds">
            <summary>Liste de tous les <see cref="T:SudoEngine.Core.Sound"/> chargés en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.Handle">
            <summary>Handle du son (nécessaire au fonctionnement d'OpenAL)</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.Source">
            <summary>Handle de la source du son</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.NumberChannels">
            <summary>Nombre de chaines du son (Mono ou Stereo)</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.SampleRate">
            <summary>Sample rate du son</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.BitsPerSample">
            <summary>Bits par sample du son</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.Size">
            <summary>Taille des données du son</summary>
        </member>
        <member name="P:SudoEngine.Core.Sound.Format">
            <summary><see cref="T:OpenTK.Audio.OpenAL.ALFormat"/> représentant le format du son</summary>
        </member>
        <member name="M:SudoEngine.Core.Sound.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Core.Sound"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Sound par défaut)</param>
        </member>
        <member name="M:SudoEngine.Core.Sound.Play">
            <summary>Joue le son</summary>
        </member>
        <member name="M:SudoEngine.Core.Sound.Pause">
            <summary>Met le son en pause</summary>
        </member>
        <member name="M:SudoEngine.Core.Sound.Delete">
            <summary>Supprime le son</summary>
        </member>
        <member name="M:SudoEngine.Core.Sound.LoadFromFile(System.String)">
            <summary>
            Crée un son à partir d'un fichier .WAV
            </summary>
            <param name="path">Le chemin vers le fichier du son (ajoute "Sounds/" devant et ".wav" derrière par défaut)</param>
        </member>
        <member name="M:SudoEngine.Core.Sound.DeleteAll">
            <summary>Supprime tous les <see cref="T:SudoEngine.Core.Sound"/></summary>
        </member>
        <member name="T:SudoEngine.Core.Music">
            <summary>
            Classe qui représente une musique, fourni un ensemble de méthodes et de propriétés qui facilitent la création et la manipulation
            <para>Hérite de <see cref="T:SudoEngine.Core.BaseObject"/> et ne peut pas être hérité</para>
            <para>Pas encore implémenté</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Core.Music.AllMusics">
            <summary>Liste de tous les <see cref="T:SudoEngine.Core.Music"/> chargés en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Core.Music.Handle">
            <summary>Handle de la musique (nécessaire au fonctionnement d'OpenAL)</summary>
        </member>
        <member name="P:SudoEngine.Core.Music.Source">
            <summary>Handle de la source</summary>
        </member>
        <member name="P:SudoEngine.Core.Music.SampleRate">
            <summary>Sample rate de la musique</summary>
        </member>
        <member name="P:SudoEngine.Core.Music.Format">
            <summary><see cref="T:OpenTK.Audio.OpenAL.ALFormat"/> représentant le format de la musique</summary>
        </member>
        <member name="M:SudoEngine.Core.Music.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Core.Music"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Music par défaut)</param>
        </member>
        <member name="M:SudoEngine.Core.Music.Play">
            <summary>Joue le son</summary>
        </member>
        <member name="M:SudoEngine.Core.Music.Pause">
            <summary>Met le son en pause</summary>
        </member>
        <member name="M:SudoEngine.Core.Music.Delete">
            <summary>Supprime le son</summary>
        </member>
        <member name="M:SudoEngine.Core.Music.LoadFromFile(System.String)">
            <summary>
            Crée une musique à partir d'un fichier .MP3
            </summary>
            <param name="path">Le chemin vers le fichier de la musique (ajoute "Musics/" devant et ".mp3" derrière par défaut)</param>
        </member>
        <member name="T:SudoEngine.Core.Audio">
            <summary>Classe statique offrant des méthodes pour gérer OpenAL (contexte et device)</summary>
        </member>
        <member name="P:SudoEngine.Core.Audio.Device">
            <summary>Le device actuellement ouvert</summary>
        </member>
        <member name="P:SudoEngine.Core.Audio.Context">
            <summary>Le contexte actuellement créé</summary>
        </member>
        <member name="M:SudoEngine.Core.Audio.Init">
            <summary>Crée un contexte OpenAL valide</summary>
        </member>
        <member name="M:SudoEngine.Core.Audio.Init(System.String)">
            <summary>
            Crée un contexte OpenAL valide avec le device spécifié
            </summary>
            <param name="deviceName">Le nom du device</param>
        </member>
        <member name="M:SudoEngine.Core.Audio.DeviceList">
            <summary>
            Récupère la liste des devices
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> contenant la liste des noms des devices</returns>
        </member>
        <member name="M:SudoEngine.Core.Audio.Delete">
            <summary>Détruit le contexte et ferme le device</summary>
        </member>
        <member name="T:SudoEngine.Core.BaseObject">
            <summary>Classe <see langword="abstract"/> qui fournit des fonctionnalités de base pour d'autres classes</summary>
        </member>
        <member name="P:SudoEngine.Core.BaseObject.Name">
            <summary>Nom interne de l'objet</summary>
        </member>
        <member name="P:SudoEngine.Core.BaseObject.ID">
            <summary><see cref="T:System.Guid"/> servant d'ID interne de l'objet</summary>
        </member>
        <member name="P:SudoEngine.Core.BaseObject.Enabled">
            <summary><see cref="T:System.Boolean"/> indiquant si l'objet est activé ou non (<see langword="true"/> par défaut)</summary>
        </member>
        <member name="P:SudoEngine.Core.BaseObject.Deleted">
            <summary><see cref="T:System.Boolean"/> indiquant si l'objet est supprimé ou non (<see langword="false"/> par défaut)</summary>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.#ctor">
            <summary>Crée un nouvel objet <see cref="T:SudoEngine.Core.BaseObject"/> et génère un <see cref="T:System.Guid"/></summary>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Core.BaseObject"/> avec comme nom interne le nom spécifié et génère un <see cref="T:System.Guid"/>
            </summary>
            <param name="name">Le nom interne de l'objet</param>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.Delete">
            <summary>Affecte <see langword="false"/> à <see cref="P:SudoEngine.Core.BaseObject.Deleted"/></summary>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.SetEnable(System.Boolean)">
            <summary>
            Change l'état de l'objet
            </summary>
            <param name="status"><see cref="T:System.Boolean"/> indiquant le nouveau statut</param>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.ToString">
            <summary>
            Converti en <see cref="T:System.String"/> l'objet
            </summary>
            <returns>Un string avec ce format : <see cref="P:SudoEngine.Core.BaseObject.Name"/> de type <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.Equals(System.Object)">
            <summary>
            Vérifie si l'objet passé en paramètre est un <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="obj">L'objet à vérifier</param>
            <returns><see langword="true"/> si l'objet est un <see cref="T:SudoEngine.Core.BaseObject"/> sinon <see langword="false"/></returns>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.GetHashCode">
            <summary>
            Génère le HashCode de l'<see cref="P:SudoEngine.Core.BaseObject.ID"/>
            </summary>
            <returns>Le HashCode de l'<see cref="P:SudoEngine.Core.BaseObject.ID"/></returns>
        </member>
        <member name="M:SudoEngine.Core.BaseObject.op_Implicit(SudoEngine.Core.BaseObject)~System.Boolean">
            <summary>
            <see langword="true"/> si l'objet n'est pas <see langword="null"/> sinon <see langword="false"/>
            </summary>
            <param name="obj">L'objet à vérifier</param>
        </member>
        <member name="T:SudoEngine.Core.GameObject">
            <summary>
            Classe <see langword="abstract"/> qui fournit du scripting et un système de hiérarchie d'objet
            <para>Hérite de <see cref="T:SudoEngine.Core.BaseObject"/> et doit être hérité pour être utilisé</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Core.GameObject.AllGameObjects">
            <summary>Liste de tous les <see cref="T:SudoEngine.Core.GameObject"/> chargés en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Core.GameObject.Started">
            <summary><see cref="T:System.Boolean"/> indiquant si le GameObject est passé par l'évenement <see cref="M:SudoEngine.Core.GameObject.OnStart"/></summary>
        </member>
        <member name="P:SudoEngine.Core.GameObject.Parent">
            <summary>Le <see cref="T:SudoEngine.Core.GameObject"/> assigné en parent de ce GameObject, <see langword="null"/> si aucun parent</summary>
        </member>
        <member name="P:SudoEngine.Core.GameObject.Childrens">
            <summary>Liste des enfants de ce GameObject</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Core.GameObject"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (GameObject par défaut)</param>
        </member>
        <member name="M:SudoEngine.Core.GameObject.Delete">
            <summary>Supprime le GameObject ainsi que tous ces enfants</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.SetEnable(System.Boolean)">
            <summary>
            Active ou désactive l'objet ainsi que tous ces enfants
            </summary>
            <param name="status">Booléen indiquant le nouvel état de l'objet</param>
        </member>
        <member name="M:SudoEngine.Core.GameObject.Update">
            <summary>Update tous les <see cref="T:SudoEngine.Core.GameObject"/></summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.Render">
            <summary>Render tous les <see cref="T:SudoEngine.Core.GameObject"/></summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.SetParent(SudoEngine.Core.GameObject)">
            <summary>
            Permet d'assigner un objet en tant que parent du GameObject actuel
            </summary>
            <param name="parent">L'objet a mettre en parent</param>
        </member>
        <member name="M:SudoEngine.Core.GameObject.Hierarchy">
            <summary>Écrit dans la console la hiérarchie du GameObject actuel (remonte l'arbre des parents)</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.Children(System.Int32)">
            <summary>
            Écrit dans la console la liste des enfants du GameObject actuel (écrit également les enfants des enfants)
            </summary>
            <param name="index">Paramètre utilisé pour la rrécursivité, ne doit pas être modifié</param>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnCreation">
            <summary>Invoqué lors de l'appel du constructeur</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnStart">
            <summary>Invoqué lors de la première frame active</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnUpdate">
            <summary>Invoqué à chaque passage dans l'event OnUpdate de la fenêtre (La méthode statique <see cref="M:SudoEngine.Core.GameObject.Update"/> doit y être appelé)</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnRender">
            <summary>Invoqué à chaque passage dans l'event OnRender de la fenêtre (La méthode statique <see cref="M:SudoEngine.Core.GameObject.Render"/> doit y être appelé)</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnDelete">
            <summary>Invoqué lorsque la méthode <see cref="M:SudoEngine.Core.GameObject.Delete"/> est appelé</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnEnable">
            <summary>Invoqué lorsque l'objet est activé avec la méthode <see cref="M:SudoEngine.Core.GameObject.SetEnable(System.Boolean)"/></summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnDisable">
            <summary>Invoqué lorsque l'objet est désactivé avec la méthode <see cref="M:SudoEngine.Core.GameObject.SetEnable(System.Boolean)"/></summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnKeyDown(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>Invoqué à chaque passage dans l'event OnKeyDown de la fenêtre (La méthode statique <see cref="M:SudoEngine.Core.GameObject.KeyDown(OpenTK.Input.KeyboardKeyEventArgs)"/> doit y être appelé)</summary>
        </member>
        <member name="M:SudoEngine.Core.GameObject.OnKeyUp(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>Invoqué à chaque passage dans l'event OnKeyUp de la fenêtre (La méthode statique <see cref="M:SudoEngine.Core.GameObject.KeyUp(OpenTK.Input.KeyboardKeyEventArgs)"/> doit y être appelé)</summary>
        </member>
        <member name="T:SudoEngine.Core.Log">
            <summary>Classe statique offrant des méthodes pour écrire dans la console</summary>
        </member>
        <member name="M:SudoEngine.Core.Log.Info(System.Object)">
            <summary> <param>Écrit un message dans la console (police bleue)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.Warning(System.Object)">
            <summary> <param>Écrit un message dans la console (police jaune)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.Error(System.Object)">
            <summary> <param>Écrit un message dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.GLError">
            <summary> <param>Écrit l'erreur OpenGL la plus récente dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.ALError">
            <summary> <param>Écrit l'erreur OpenAL la plus récente dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.AlcError">
            <summary> <param>Écrit l'erreur OpenAL la plus récente dans la console (police rouge)</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.StartTimer">
            <summary> <param>Lance une StopWatch</param> </summary>
        </member>
        <member name="M:SudoEngine.Core.Log.StopTimer">
            <summary> <param>Stoppe la Stopwatch et écrit le temps écoulé avec un log info</param> </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.Identity">
            <summary>
            A no-rotation quaternion (0.0, 0.0, 0.0, 1.0)
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.Length">
            <summary>
            The length of that quaternion.
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.LengthSquared">
            <summary>
            The squared length of that quaternion. Faster than <see cref="P:SudoEngine.Maths.Quaternion.Length"/> but has to be squared rooted.
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Quaternion.Euler">
            <summary>
            Get or set the euler rotation (degree) of this quaternion.
            </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Length">
            <summary> Taile du vecteur  </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.SquaredLength">
            <summary> Racine carré de la taile du vecteur </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.#ctor(System.Double)">
            <summary> Crée un Vecteur2D à partir d'un double </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.#ctor(System.Double,System.Double)">
            <summary> Crée un Vecteur2D à partir de deux double </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Normalize">
            <summary> Normalise le vecteur </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Distance(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule la distance entre 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.SquaredDistance(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule la distance au carré entre 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Dot(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Multiple 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.Angle(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule l'angle entre 2 vecteurs </summary>
        </member>
        <member name="M:SudoEngine.Maths.Vector2D.SignedAngle(SudoEngine.Maths.Vector2D,SudoEngine.Maths.Vector2D)">
            <summary> Calcule l'angle signé entre 2 vecteurs </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Zero">
            <summary> Crée un vecteur 0 </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Up">
            <summary> Crée un vecteur qui pointe vers le haut </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Down">
            <summary> Crée un vecteur qui pointe vers le bas </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Right">
            <summary> Crée un vecteur qui pointe vers la gauche </summary>
        </member>
        <member name="P:SudoEngine.Maths.Vector2D.Left">
            <summary> Crée un vecteur qui pointe vers la droite </summary>
        </member>
        <member name="T:SudoEngine.Render.Layer">
            <summary>Couche sur lequel un <see cref="T:SudoEngine.Render.BackGround"/> se trouve
            <para>Affecte l'ordre de Render ainsi que l'accessibilité de certaines propriétés</para>
            </summary>
        </member>
        <member name="F:SudoEngine.Render.Layer.BackGround">
            <summary>Le Layer le plus au fond</summary>
        </member>
        <member name="F:SudoEngine.Render.Layer.CloseBackGround">
            <summary>Le Layer entre le <see cref="F:SudoEngine.Render.Layer.PlayerLayer"/> et le <see cref="F:SudoEngine.Render.Layer.BackGround"/></summary>
        </member>
        <member name="F:SudoEngine.Render.Layer.PlayerLayer">
            <summary>Le Layer sur lequel se trouve le joueur</summary>
        </member>
        <member name="F:SudoEngine.Render.Layer.CloseForeGround">
            <summary>Le Layer entre le <see cref="F:SudoEngine.Render.Layer.PlayerLayer"/> et le <see cref="F:SudoEngine.Render.Layer.ForeGround"/></summary>
        </member>
        <member name="F:SudoEngine.Render.Layer.ForeGround">
            <summary>Le Layer le plus proche</summary>
        </member>
        <member name="T:SudoEngine.Render.BackGround">
            <summary>
            Classe permettant de gérer des BackGround, fourni un ensemble de méthodes et de propriétés qui facilitent la création et le rendu
            <para>Hérite de <see cref="T:SudoEngine.Core.BaseObject"/> et ne peut pas être héritée</para>
            </summary>
        </member>
        <member name="F:SudoEngine.Render.BackGround.AllBackGrounds">
            <summary>Liste des 5 <see cref="T:SudoEngine.Render.BackGround"/> ayant un layer</summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Layer">
            <summary> Indique le layer sur lequel se trouve le BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.GFX">
            <summary> La texture attaché au BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Shader">
            <summary> Le shader attaché au BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Transparency">
            <summary> La transparence du BackGround, entre 0 (opaque) et 1 (complètement transparent) </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Visible">
            <summary> Indique si oui ou non le BackGround doit être render (<see langword="true"/> par défaut)</summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Size">
            <summary> La taille (en écrans) du BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Width">
            <summary> La largeur (en écrans) du BackGround </summary>
        </member>
        <member name="P:SudoEngine.Render.BackGround.Height">
            <summary> La hauteur (en écrans) du BackGround </summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.BackGround"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (BackGround par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Bind">
            <summary>Bind les ressources du BackGround</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Delete">
            <summary>Supprime le BackGround</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Render">
            <summary>Render le BackGround</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(SudoEngine.Render.Layer,SudoEngine.Render.Shader,SudoEngine.Render.Texture,SudoEngine.Maths.Vector2D)">
            <summary>
            Génère le BackGround avec les paramètres donnés (<see cref="T:SudoEngine.Render.Layer"/>, <see cref="T:SudoEngine.Render.Shader"/>, <see cref="T:SudoEngine.Render.Texture"/> et <see cref="T:SudoEngine.Maths.Vector2D"/>)
            </summary>
            <param name="layer">Le <see cref="T:SudoEngine.Render.Layer"/> sur lequel se trouve le BackGround</param>
            <param name="shader">Le <see cref="T:SudoEngine.Render.Shader"/> associé au BackGround</param>
            <param name="gfx">La <see cref="T:SudoEngine.Render.Texture"/> du BackGround, ces graphismes</param>
            <param name="size"><see cref="T:SudoEngine.Maths.Vector2D"/> représentant la taille du BackGround en écrans</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(SudoEngine.Render.Layer,SudoEngine.Render.Shader,System.Int32[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Génère le BackGround avec les paramètres données (<see cref="T:SudoEngine.Render.Layer"/>, <see cref="T:SudoEngine.Render.Shader"/>, <see cref="!:int[,]"/> et <see cref="T:System.Drawing.Bitmap"/>)
            </summary>
            <param name="layer">Le <see cref="T:SudoEngine.Render.Layer"/> sur lequel se trouve le BackGround</param>
            <param name="shader">Le <see cref="T:SudoEngine.Render.Shader"/> associé au BackGround</param>
            <param name="data">Array d'<see cref="!:int[,]"/> représentant les données des tiles</param>
            <param name="tileset"><see cref="T:System.Drawing.Bitmap"/> représentant le tileset</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(SudoEngine.Render.Texture,SudoEngine.Maths.Vector2D)">
            <summary>
            Génère le BackGround avec les paramètres données (<see cref="T:SudoEngine.Render.Texture"/> et <see cref="T:SudoEngine.Maths.Vector2D"/>)
            </summary>
            <param name="gfx">La <see cref="T:SudoEngine.Render.Texture"/> du BackGround, ces graphismes</param>
            <param name="size"><see cref="T:SudoEngine.Maths.Vector2D"/> représentant la taille du BackGround en écrans</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.Generate(System.Int32[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Génère le BackGround avec les paramètres données (<see cref="!:int[,]"/> et <see cref="T:System.Drawing.Bitmap"/>)
            </summary>
            <param name="data">Array d'<see cref="!:int[,]"/> représentant les données des tiles</param>
            <param name="tileset"><see cref="T:System.Drawing.Bitmap"/> représentant le tileset</param>
        </member>
        <member name="M:SudoEngine.Render.BackGround.DeleteTile(System.Int32)">
            <summary>Supprime une tile du BackGround (utilisation déconseillée)</summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.RenderAll">
            <summary>Render tous les BackGround non <see langword="null"/>/></summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.DeleteAll">
            <summary>Supprime tous les BackGround/></summary>
        </member>
        <member name="M:SudoEngine.Render.BackGround.CreateList">
            <summary>Initialise la liste des BackGrounds avec la valeur <see langword="null"/></summary>
        </member>
        <member name="M:SudoEngine.Render.Mesh.Delete">
            <summary>Supprime le Mesh</summary>
        </member>
        <member name="T:SudoEngine.Render.Shader">
            <summary>
            Classe permettant de gérer des Shader, fourni des méthodes facilitant la manipulation des données
            <para>Hérite de <see cref="T:SudoEngine.Core.BaseObject"/> et ne peut pas être héritée</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Render.Shader.AllShaders">
            <summary>Liste de tous les <see cref="T:SudoEngine.Render.Shader"/> actuellement chargés en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Render.Shader.Handle">
            <summary>Handle du shader (nécessaire au fonctionnement d'OpenGL)</summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.Shader"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Shader par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.Use">
            <summary>Bind le shader</summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.Delete">
            <summary>Supprime le shader </summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.DeleteAll">
            <summary>Supprime tous les <see cref="T:SudoEngine.Render.Shader"/></summary>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Int32)">
            <summary>
            Permet de set un unifrom de type <see cref="T:System.Int32"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Single)">
            <summary>
            Permet de set un unifrom de type <see cref="T:System.Single"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Double)">
            <summary>
            Permet de set un unifrom de type <see cref="T:System.Double"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector2*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector2"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector2)">
            <summary>
            Permet de set un unifrom de type <see cref="T:OpenTK.Vector2"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector2D*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:SudoEngine.Maths.Vector2D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector2D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Vector2D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector3*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector3"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector3)">
            <summary>
            Permet de set un unifrom de type <see cref="T:OpenTK.Vector3"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector3D*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:SudoEngine.Maths.Vector3D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector3D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Vector3D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector4*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Vector4)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Vector4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector4D*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:SudoEngine.Maths.Vector4D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Vector4D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Vector4D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Matrix4*)">
            <summary>
            Permet de set un unifrom de type pointeur de <see cref="T:OpenTK.Matrix4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,OpenTK.Matrix4)">
            <summary>
            Permet de set un unifrom de type <see cref="T:OpenTK.Matrix4"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,SudoEngine.Maths.Matrix4D)">
            <summary>
            Permet de set un unifrom de type <see cref="T:SudoEngine.Maths.Matrix4D"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.SetAttribute(System.String,System.Boolean)">
            <summary>
            Permet de set un unifrom de type <see cref="T:System.Boolean"/> dans le shader
            </summary>
            <param name="name">Le nom de la variable dans le shader</param>
            <param name="value">La valeur a passer dans la variable</param>
        </member>
        <member name="M:SudoEngine.Render.Shader.GetAttribLocation(System.String)">
            <summary>
            Récupère l'emplacement mémoire d'une variable uniform
            </summary>
            <param name="name">Le nom de la variable</param>
            <returns>L'empllacement de la variable</returns>
        </member>
        <member name="M:SudoEngine.Render.Shader.LoadFromFile(System.String,System.String,System.String)">
            <summary>
            Crée un shader a partir de fichiers (Shaders/ est automatiquement rajouté devant les chemins)
            </summary>
            <param name="Vpath">Chemin vers le Vertex Shader</param>
            <param name="Fpath">Cheminvers le Fragment Shader</param>
            <param name="Gpath">Chemin vers le Geometry Shader (<see langword="null"/> si non présent)</param>
        </member>
        <member name="T:SudoEngine.Render.Sprite">
            <summary>
            Classe <see langword="abstract"/> offrant un ensemble de propriétés et des méthodes permettant de créer des sprites et d'utiliser le système de scripting de 
            <see cref="T:SudoEngine.Core.GameObject"/> en plus d'automatiser le rendu
            <para>Hérite de <see cref="T:SudoEngine.Core.GameObject"/> et doit être héritée pour être utilisé</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.AllSprites">
            <summary>Liste des tous les <see cref="T:SudoEngine.Render.Sprite"/> chargés en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.Shader">
            <summary><see cref="T:SudoEngine.Render.Shader"/> associé au sprite</summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.SpriteSheet">
            <summary><see cref="T:SudoEngine.Render.Texture"/> contenant les différentes frames de l'animation du Sprite</summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.Size">
            <summary><see cref="T:SudoEngine.Maths.Vector2D"/> représenant la taille en pixels du sprite
            <para>Il est fortement recommandé que cette taille soit égale à la taille des frames dans le <see cref="P:SudoEngine.Render.Sprite.SpriteSheet"/></para>
            </summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.Width">
            <summary>Largueur du sprite</summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.Height">
            <summary>Hauteur du sprite</summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.Visible">
            <summary><see cref="T:System.Boolean"/> indiquant si le sprite doit être render</summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.Position">
            <summary>Position du sprite dans la fenêtre
            <para>La position 0;0 se trouve au centre de la fenêtre et elle est relative à la taille de l'écran et non la fenêtre</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Render.Sprite.RowInSpriteSheet">
            <summary>La ligne sur laquelle se trouve les frames d'animations dans le <see cref="P:SudoEngine.Render.Sprite.SpriteSheet"/></summary>
        </member>
        <member name="M:SudoEngine.Render.Sprite.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.Sprite"/> et appele le constructeur de <see cref="T:SudoEngine.Core.GameObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Sprite par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Sprite.Generate(SudoEngine.Render.Texture,SudoEngine.Render.Shader,System.Double,SudoEngine.Maths.Vector2D)">
            <summary>
            Génère un Sprite avec les paramètres données
            </summary>
            <param name="spriteSheet">La <see cref="T:SudoEngine.Render.Texture"/> contenant les frames d'animation</param>
            <param name="shader">Le <see cref="P:SudoEngine.Render.Sprite.Shader"/> associé au Sprite</param>
            <param name="rowInSpriteSheet">Le numéro de ligne sur lequel se trouve les frames d'animation du Sprite dans le <see cref="P:SudoEngine.Render.Sprite.SpriteSheet"/></param>
            <param name="size"><see cref="T:SudoEngine.Maths.Vector2D"/> représentant la taille en pixels du Sprite</param>
        </member>
        <member name="M:SudoEngine.Render.Sprite.Delete">
            <summary>Supprime le Sprite</summary>
        </member>
        <member name="M:SudoEngine.Render.Sprite.DeleteAll">
            <summary>Supprime tous les <see cref="T:SudoEngine.Render.Sprite"/> </summary>
        </member>
        <member name="M:SudoEngine.Render.Sprite.Bind">
            <summary>Bind le Sprite</summary>
        </member>
        <member name="M:SudoEngine.Render.Sprite.DisplayFrame(System.Int32)">
            <summary>
            Permet de changer la frame actuellement display depuis le <see cref="P:SudoEngine.Render.Sprite.SpriteSheet"/> pour le Sprite
            </summary>
            <param name="idx">L'index de la frame dans le <see cref="P:SudoEngine.Render.Sprite.SpriteSheet"/></param>
        </member>
        <member name="M:SudoEngine.Render.Sprite.ChangeRow(System.Double)">
            <summary>
            Change la ligne sur laquelle se trouve les graphismes du Sprite sur le <see cref="P:SudoEngine.Render.Sprite.SpriteSheet"/>
            </summary>
            <param name="row">Le nouveau numéro de ligne</param>
        </member>
        <member name="T:SudoEngine.Render.Texture">
            <summary>
            Classe permettant de gérer des Textures, fourni un ensemble de méthodes et de propriétés qui facilitent la création et l'utilisation
            <para>Hérite de <see cref="T:SudoEngine.Core.BaseObject"/> et ne peut pas être héritée</para>
            </summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.AllTextures">
            <summary>Liste de toutes les <see cref="T:SudoEngine.Render.Texture"/> actuellement chargées en mémoire</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Handle">
            <summary>Handle de la texture (nécessaire au fonctionnement d'OpenGL)</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Size">
            <summary>Taille de la texture, en pixels</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Width">
            <summary>Longueur de la texture en pixels</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Height">
            <summary>Hauteur de la texture en pixels</summary>
        </member>
        <member name="P:SudoEngine.Render.Texture.Data">
            <summary>Les données brutes des pixels de la texture</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.#ctor(System.String)">
            <summary>
            Crée un nouvel objet <see cref="T:SudoEngine.Render.Texture"/> et appele le constructeur de <see cref="T:SudoEngine.Core.BaseObject"/>
            </summary>
            <param name="name">Le nom interne de l'objet (Texture par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Texture.Delete">
            <summary>Supprime la texture</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.DeleteAll">
            <summary>Supprime toutes les <see cref="T:SudoEngine.Render.Texture"/></summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.Bind">
            <summary>Bind la texture</summary>
        </member>
        <member name="M:SudoEngine.Render.Texture.LoadFromFile(System.String)">
            <summary>
            Crée une texture à partir d'un fichier (préférablement un PNG)
            </summary>
            <param name="path">Le chemin vers le fichier de la texture (ajoute "Texture/" devant par défaut)</param>
        </member>
        <member name="M:SudoEngine.Render.Texture.LoadFromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Crée une texture à partir d'un <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <param name="image">L'image à convertir en texture</param>
            <param name="reverse"><see cref="T:System.Boolean"/> indiquant si l'image doit être flip verticalement</param>
        </member>
        <member name="M:SudoEngine.Render.Texture.Generate(System.Byte[])">
            <summary>
            Génère une texture directement à partir de données brutes de pixels
            </summary>
            <param name="data">Array de <see cref="T:System.Byte"/> contenant les données RGBA de chaque pixel</param>
        </member>
    </members>
</doc>
